


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             reset, DATA
    2 00000000         
    3 00000000         
    4 00000000         __Vectors
    5 00000000 20001000        DCD              0x20001000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
    6 00000004 00000000        DCD              Reset_Handler ; reset vector
    7 00000008                 ALIGN
    8 00000008         
    9 00000008                 AREA             ARM, CODE, READONLY
   10 00000000                 ENTRY
   11 00000000         
   12 00000000         
   13 00000000         Reset_Handler
   14 00000000         
   15 00000000         ; Definición de registros. Estos son mandados en el mod
                       ulo de red
   16 00000000 00020000 
                       GPIO_BASE
                               EQU              0x20000     ;//@ Dirección bas
                                                            e del registro GPIO
                                                            
   17 00000000 00000004 
                       GPIO_SET_OFFSET
                               EQU              0x04        ;// Final del regis
                                                            tro GPIO 
   18 00000000 00020001 
                       GPIO_REQUEST
                               EQU              0x20001
   19 00000000 00000000 
                       SENSOR_BASE
                               EQU              0x00        ; //Dirección base
                                                             del registro de Se
                                                            nsores
   20 00000000 00000082 
                       SENSOR_SET_OFFSET
                               EQU              0x82        ;// Final del regis
                                                            tro Sensores 
   21 00000000         
   22 00000000         main
   23 00000000         ; Configurar los pines de los sensores como entradas y e
                       l GPIO como salida
   24 00000000 F44F 3000       ldr              r0, =GPIO_BASE
   25 00000004 F04F 0100       ldr              r1, =SENSOR_BASE
   26 00000008 F04F 0200       mov              r2, #0      ; flag de enviar da
                                                            tos por medio de GP
                                                            IO_BASE y salir del
                                                             loop;
   27 0000000C         ;r3 para calculos
   28 0000000C F04F 0481       mov              r4, #129    ; Número total de 
                                                            estacionamientos
   29 00000010 F04F 0500       mov              r5, #0      ; Contador de itera
                                                            ciones
   30 00000014 F04F 0600       mov              r6, #0      ; Número de estaci
                                                            onamiento
   31 00000018 F04F 0700       mov              r7, #0      ; Piso
   32 0000001C         ; falta registro de flag para comenzar a buscar
   33 0000001C 4B12            ldr              r3, =GPIO_REQUEST



ARM Macro Assembler    Page 2 


   34 0000001E F8D3 8000       ldr              r8, [r3]
   35 00000022 E7FF            B                preloop
   36 00000024         
   37 00000024         preloop                              ;
   38 00000024 F1B8 0F01       CMP              R8, #1
   39 00000028 D000            BEQ              loop
   40 0000002A D1FB            BNE              preloop
   41 0000002C         
   42 0000002C         loop                                 ;
   43 0000002C         ; Leer el estado de los sensores
   44 0000002C F101 0101       add              r1, r1, #1  ; Desplazar al sigu
                                                            iente sensor
   45 00000030 680B            ldr              r3, [r1]    ; Cargar valor de s
                                                            ensor
   46 00000032 F000 F805       BL               check_sensors
   47 00000036 F105 0501       add              r5, r5, #1  ;
   48 0000003A 2D81            CMP              r5, #129
   49 0000003C D1F6            BNE              loop
   50 0000003E D003            BEQ              sensor_no_ocupado
   51 00000040         
   52 00000040         check_sensors
   53 00000040 F013 0F01       tst              r3, #1      ; Verificar el bit 
                                                            menos significativo
                                                             (Sensor de estacio
                                                            namiento actual)
   54 00000044 D000            beq              sensor_no_ocupado ; Saltar si e
                                                            l bit es 0 (espacio
                                                             no ocupado)
   55 00000046 4770            BX               LR          ;Si no volver al lo
                                                            op
   56 00000048         
   57 00000048         sensor_no_ocupado
   58 00000048         ; Calcular el piso y el número de estacionamiento
   59 00000048 F04F 032B       ldr              r3, =43     ; Número de estaci
                                                            onamientos por piso
                                                            , udiv no puede usa
                                                            r inmediato
   60 0000004C FBB5 F7F3       udiv             r7, r5, r3  ; Cálculo del piso
                                                             (usando división 
                                                            entera)
   61 00000050 EBA5 0607       sub              r6, r5, r7  ; Número de estaci
                                                            onamiento (comienza
                                                             desde 0)
   62 00000054 FB06 F303       mul              r3, r6, r3  ; 
   63 00000058         
   64 00000058 F04F 0201       mov              r2,#1       ; Mandar datos y fl
                                                            ag para detener loo
                                                            ps
   65 0000005C E7FF            b                Send_byte_UART ;
   66 0000005E         
   67 0000005E         Send_byte_UART                       ;---cargar a GPIO l
                                                            os datos(Piso y num
                                                            ero)---
   68 0000005E F8C0 7001       STR              r7, [r0, #1] ; carga el piso
   69 00000062 F8C0 6001       STR              r6, [r0, #1] ; carga el número
                                                             de estacionamiento
                                                            
   70 00000066 E7CB            b                main
                       



ARM Macro Assembler    Page 3 


              00020001 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M7 --fpu=
SoftVFP --depend=.\objects\proyecto.d -o.\objects\proyecto.o -IC:\Users\2001i\A
ppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM7\Include --predefine="_
_EVAL SETA 1" --predefine="__UVISION_VERSION SETA 538" --predefine="ARMCM7 SETA
 1" --list=.\listings\proyecto.lst Proyecto.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 4 in file Proyecto.s
   Uses
      None
Comment: __Vectors unused
reset 00000000

Symbol: reset
   Definitions
      At line 1 in file Proyecto.s
   Uses
      None
Comment: reset unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARM 00000000

Symbol: ARM
   Definitions
      At line 9 in file Proyecto.s
   Uses
      None
Comment: ARM unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 13 in file Proyecto.s
   Uses
      At line 6 in file Proyecto.s
Comment: Reset_Handler used once
Send_byte_UART 0000005E

Symbol: Send_byte_UART
   Definitions
      At line 67 in file Proyecto.s
   Uses
      At line 65 in file Proyecto.s
Comment: Send_byte_UART used once
check_sensors 00000040

Symbol: check_sensors
   Definitions
      At line 52 in file Proyecto.s
   Uses
      At line 46 in file Proyecto.s
Comment: check_sensors used once
loop 0000002C

Symbol: loop
   Definitions
      At line 42 in file Proyecto.s
   Uses
      At line 39 in file Proyecto.s
      At line 49 in file Proyecto.s

main 00000000

Symbol: main
   Definitions
      At line 22 in file Proyecto.s
   Uses
      At line 70 in file Proyecto.s
Comment: main used once
preloop 00000024

Symbol: preloop
   Definitions
      At line 37 in file Proyecto.s
   Uses
      At line 35 in file Proyecto.s
      At line 40 in file Proyecto.s

sensor_no_ocupado 00000048



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: sensor_no_ocupado
   Definitions
      At line 57 in file Proyecto.s
   Uses
      At line 50 in file Proyecto.s
      At line 54 in file Proyecto.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_BASE 00020000

Symbol: GPIO_BASE
   Definitions
      At line 16 in file Proyecto.s
   Uses
      At line 24 in file Proyecto.s
Comment: GPIO_BASE used once
GPIO_REQUEST 00020001

Symbol: GPIO_REQUEST
   Definitions
      At line 18 in file Proyecto.s
   Uses
      At line 33 in file Proyecto.s
Comment: GPIO_REQUEST used once
GPIO_SET_OFFSET 00000004

Symbol: GPIO_SET_OFFSET
   Definitions
      At line 17 in file Proyecto.s
   Uses
      None
Comment: GPIO_SET_OFFSET unused
SENSOR_BASE 00000000

Symbol: SENSOR_BASE
   Definitions
      At line 19 in file Proyecto.s
   Uses
      At line 25 in file Proyecto.s
Comment: SENSOR_BASE used once
SENSOR_SET_OFFSET 00000082

Symbol: SENSOR_SET_OFFSET
   Definitions
      At line 20 in file Proyecto.s
   Uses
      None
Comment: SENSOR_SET_OFFSET unused
5 symbols
350 symbols in table
